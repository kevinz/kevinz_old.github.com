<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tool | Code Mind]]></title>
  <link href="http://gekben.gitcd.com/blog/categories/tool/atom.xml" rel="self"/>
  <link href="http://gekben.gitcd.com/"/>
  <updated>2013-03-19T08:31:40+08:00</updated>
  <id>http://gekben.gitcd.com/</id>
  <author>
    <name><![CDATA[Kevin Zeng]]></name>
    <email><![CDATA[kevintech08@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[解决octopress的git自动deploy问题]]></title>
    <link href="http://gekben.gitcd.com/blog/2012/07/12/fix-octopress-git-issuse/"/>
    <updated>2012-07-12T07:05:00+08:00</updated>
    <id>http://gekben.gitcd.com/blog/2012/07/12/fix-octopress-git-issuse</id>
    <content type="html"><![CDATA[<p>已经习惯了在折腾中学习，把遇到的问题看成是学习的机会，有了这种心态，就
不怕麻烦了。昨天晚上为了解决octopress不能<code>rake deploy</code>的问题，搞了几个
小时，搞完了对git的分支的理解得到了提升。</p>

<p>解决完了再回头看，其实我的问题很sb，master branch本来只应该包括<em>deploy
目录里的内容，但我因为误操作把上层目录都变成了master branch，这样就会
在github上自己的blog项目内，看到很多本来不属于blog的文件。当然使用
<code>rake deploy</code>也会出现问题。之前瞎折腾了很久，浪费好多时间，结果还是读
源码解决了问题，Rakefile里<code>setup_github_page</code>和<code>push</code>任务看看，就知道
咋回事了。需要注意的是，除了</em>deploy的其它文件都在source branch里，因为
<code>setup_github_page</code>初始化时把master重命名成了source。</p>

<!-- more -->


<p>{% codeblock my solution lang:bash %}
$rm -rf <em>deploy
$mkdir </em>deploy
$cd _deploy
$git init
$echo "test" > index.html
$git branch -m master
$git commit -m "octopress init"
$git remote add origin git@github.com:username/username.github.com.git
$git push origin master
{% endcodeblock %}</p>

<p>后来又遇到<code>rake generate</code>时报<code>Psych::SyntaxError</code> parse错误，表面看是说<code>_config.yml</code>有
问题，但实际问题往往出在自己写的<code>_post</code>的markdown文件上，可以在<code>psycn.rb</code>上加调试语句来发现问题。
{% codeblock my solution lang:ruby %}
  def self.parse_stream yaml, filename = nil, &amp;block</p>

<pre><code>if block_given?
  parser = Psych::Parser.new(Handlers::DocumentStream.new(&amp;block))
  # debug begin
  if filename == nil
    p yaml,"\nDebuging"
  end
  # debug end
  parser.parse yaml, filename
else
  parser = self.parser
  parser.parse yaml, filename
  parser.handler.root
end 
</code></pre>

<p>  end
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[寻找揭示linux网络及系统性能的工具]]></title>
    <link href="http://gekben.gitcd.com/blog/2012/07/11/collection-of-network-performance-tuning-tools/"/>
    <updated>2012-07-11T08:14:00+08:00</updated>
    <id>http://gekben.gitcd.com/blog/2012/07/11/collection-of-network-performance-tuning-tools</id>
    <content type="html"><![CDATA[<h2>Performance Testing</h2>

<ul>
<li><a href="http://www.netperf.org/netperf/">Netperf</a>

<ul>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-netperf/">Introduction</a></li>
</ul>
</li>
<li><a href="http://blog.yufeng.info/archives/2234">qperf</a></li>
<li><a href="https://github.com/wangbin579/tcpcopy/">Tcpcopy</a>

<ul>
<li><a href="https://code.google.com/p/tcpcopy">old version on googlecode</a></li>
<li>It is an online TCP duplication tool and can be used for testing (using netlink and raw
sockets).And the author claimed it's better than <a href="http://httpd.apache.org/docs/2.0/programs/ab.html">ab</a>.</li>
</ul>
</li>
<li><a href="http://redmine.lighttpd.net/projects/weighttp/wiki">Weighhttp</a></li>
<li><a href="http://tsung.erlang-projects.org/">tsung</a></li>
</ul>


<h2>System Inspecting</h2>

<ul>
<li><a href="https://www.linuxpowertop.org/powertop/">PowerTop</a></li>
<li><a href="https://latencytop.org">LatencyTop</a>

<ul>
<li><a href="http://rdc.taobao.com/blog/cs/?p=893">Introduction</a></li>
</ul>
</li>
<li><a href="http://sourceware.org/systemtap/">Systemtap</a>

<ul>
<li><a href="http://rdc.taobao.com/blog/cs/?p=477">Introduction</a></li>
<li><a href="http://www.slideshare.net/mryufeng/systemtap">Slides</a></li>
</ul>
</li>
<li>Ksysguard</li>
</ul>


<!-- more -->


<h2>Network Inspecting</h2>

<ul>
<li><a href="http://www.percona.com/docs/wiki/tcprstat:start">tcprstat</a>

<ul>
<li><a href="http://rdc.taobao.com/blog/cs/?p=728">Introduction</a></li>
</ul>
</li>
</ul>


<h2>Hardware Inspecting</h2>

<ul>
<li><a href="http://software.intel.com/en-us/articles/intel-64-architecture-processor-topology-enumeration/">cpu-topology</a>

<ul>
<li><a href="http://rdc.taobao.com/blog/cs/?p=460">Introduction</a></li>
</ul>
</li>
<li><a href="http://software.intel.com/en-us/articles/intel-performance-counter-monitor">intel performance counter monitor</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用solarized color schema提升工作效率]]></title>
    <link href="http://gekben.gitcd.com/blog/2012/07/05/use-solarized-color-schemea-under-archlinux-and-awesome/"/>
    <updated>2012-07-05T17:34:00+08:00</updated>
    <id>http://gekben.gitcd.com/blog/2012/07/05/use-solarized-color-schemea-under-archlinux-and-awesome</id>
    <content type="html"><![CDATA[<p>貌似<a href="http://www.solarized.com/">solarized</a>已经火了很久，相见狠晚啊，曾
经多么想调整下awesome的focus配色，让它不那么黯然，发现很难，现在终于可以轻松搞定
了。说实话，看不太懂官方网站上的说明，也没力气去了解，发挥下拿来主义吧。</p>

<p>{% imgpopup /images/post_img/term.png 50%  %}</p>

<!-- more -->


<p>{% imgpopup /images/post_img/emacs.png 50%  %}</p>

<p>{% imgpopup /images/post_img/vim.png 50%  %}</p>

<p>{% codeblock Put into .Xresources lang:bash https://raw.github.com/altercation/solarized/master/xresources-colors-solarized/Xresources Xresources %}
!! drop in Solarized colorscheme for Xresources/Xdefaults</p>

<p>!!SOLARIZED HEX     16/8 TERMCOL  XTERM/HEX   L<em>A</em>B      RGB         HSB
!!--------- ------- ---- -------  ----------- ---------- ----------- -----------
!!base03    #002b36  8/4 brblack  234 #1c1c1c 15 -12 -12   0  43  54 193 100  21
!!base02    #073642  0/4 black    235 #262626 20 -12 -12   7  54  66 192  90  26
!!base01    #586e75 10/7 brgreen  240 #585858 45 -07 -07  88 110 117 194  25  46
!!base00    #657b83 11/7 bryellow 241 #626262 50 -07 -07 101 123 131 195  23  51
!!base0     #839496 12/6 brblue   244 #808080 60 -06 -03 131 148 150 186  13  59
!!base1     #93a1a1 14/4 brcyan   245 #8a8a8a 65 -05 -02 147 161 161 180   9  63
!!base2     #eee8d5  7/7 white    254 #e4e4e4 92 -00  10 238 232 213  44  11  93
!!base3     #fdf6e3 15/7 brwhite  230 #ffffd7 97  00  10 253 246 227  44  10  99
!!yellow    #b58900  3/3 yellow   136 #af8700 60  10  65 181 137   0  45 100  71
!!orange    #cb4b16  9/3 brred    166 #d75f00 50  50  55 203  75  22  18  89  80
!!red       #dc322f  1/1 red      160 #d70000 50  65  45 220  50  47   1  79  86
!!magenta   #d33682  5/5 magenta  125 #af005f 50  65 -05 211  54 130 331  74  83
!!violet    #6c71c4 13/5 brmagenta 61 #5f5faf 50  15 -45 108 113 196 237  45  77
!!blue      #268bd2  4/4 blue      33 #0087ff 55 -10 -45  38 139 210 205  82  82
!!cyan      #2aa198  6/6 cyan      37 #00afaf 60 -35 -05  42 161 152 175  74  63
!!green     #859900  2/2 green     64 #5f8700 60 -20  65 133 153   0  68 100  60</p>

<h1>define S_base03        #002b36</h1>

<h1>define S_base02        #073642</h1>

<h1>define S_base01        #586e75</h1>

<h1>define S_base00        #657b83</h1>

<h1>define S_base0         #839496</h1>

<h1>define S_base1         #93a1a1</h1>

<h1>define S_base2         #eee8d5</h1>

<h1>define S_base3         #fdf6e3</h1>

<h1>define S_yellow        #b58900</h1>

<h1>define S_orange        #cb4b16</h1>

<h1>define S_red           #dc322f</h1>

<h1>define S_magenta       #d33682</h1>

<h1>define S_violet        #6c71c4</h1>

<h1>define S_blue          #268bd2</h1>

<h1>define S_cyan          #2aa198</h1>

<h1>define S_green         #859900</h1>

<p>*background:            S_base03
...
URxvt.
...
Emacs.
...
{% endcodeblock %}</p>

<p>{% codeblock Use solarized in emacs %}
(require 'color-theme-solarized)
(color-theme-solarized-light)
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Mscgen，以geek的方式画顺序图]]></title>
    <link href="http://gekben.gitcd.com/blog/2012/07/05/drawing-message-sequence-chart-in-geek-way/"/>
    <updated>2012-07-05T09:00:00+08:00</updated>
    <id>http://gekben.gitcd.com/blog/2012/07/05/drawing-message-sequence-chart-in-geek-way</id>
    <content type="html"><![CDATA[<p>相信很多人跟我一样，讨厌写文档，讨厌画图，所以喜欢
<a href="http://www.graphviz.org/">graphviz</a>，<a href="www.doxygen.org/">doxygen</a>这些
自动化工具来生成文档及图形。这两天要画一些很复杂的顺序图，找到我<a href="https://wiki.archlinux.org/index.php/Lightweight_Applications_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">喜欢</a>的
工具，<a href="http://www.mcternan.me.uk/mscgen/">Mscgen</a>，专为不爱画图，
追求效率的geek设计。</p>

<p>{% gist 3053976 %}</p>

<!-- more -->


<p>{% imgpopup /images/post_img/lvs_transp.png 50%  %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用jekyll octopress emacs写blog]]></title>
    <link href="http://gekben.gitcd.com/blog/2012/07/05/begin-to-use-jekyll/"/>
    <updated>2012-07-05T07:59:00+08:00</updated>
    <id>http://gekben.gitcd.com/blog/2012/07/05/begin-to-use-jekyll</id>
    <content type="html"><![CDATA[<p>最近学习的动力大爆发，学了不少东西，应该记录并分享出来，把自己挂在
github上的静态页面换成了强大的jekyll+octopress，捣鼓下开始写东西了，用markdown写
blog的感觉应该很棒。</p>

<p>接下来是开发环境，没错，是按写代码的方式写blog，我用的是emacs +
mardown-mode,非常爽的组合。因为我是用archlinux，用yaourt怎么
一个方便了得。</p>

<p>{% codeblock install ibus-el lang:bash %}
$ yaourt -S ibus-el
{% endcodeblock %}</p>

<!-- more -->


<p>{% codeblock ibus-mode configuration %}
(require 'ibus)
(add-hook 'after-init-hook 'ibus-mode-on)
(global-set-key (kbd "C-\") 'ibus-toggle)
{% endcodeblock %}
备注：因为ibus-mode很恼人的context warning问题，已经抛弃它了，直接把
emacs可执行文件包装一下，放在shell里:
{% codeblock my emacs wrapper script lang:bash%}</p>

<h1>!/bin/sh</h1>

<h1>emacs-real is the real original emacs executable</h1>

<p>LC_CTYPE=zh_CN.UTF-8 /usr/bin/emacs-real
{% endcodeblock %}
就可以直接使用系统的ibus了，低碳环保还不闹心。</p>

<p>{% codeblock Enable markdown mode %}
(autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
(setq auto-mode-alist
   (cons '("\.text"  . markdown-mode) auto-mode-alist))</p>

<p>(setq auto-mode-alist</p>

<pre><code>  (cons '("\\.md"  . markdown-mode) auto-mode-alist))
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
