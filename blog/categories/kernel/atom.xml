<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel | Code Mind]]></title>
  <link href="http://gekben.gitcd.com/blog/categories/kernel/atom.xml" rel="self"/>
  <link href="http://gekben.gitcd.com/"/>
  <updated>2012-08-16T21:56:41+08:00</updated>
  <id>http://gekben.gitcd.com/</id>
  <author>
    <name><![CDATA[Kevin Zeng]]></name>
    <email><![CDATA[kevintech08@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在SUSE Enterprise上安装Systemtap，解决build-id mismatch]]></title>
    <link href="http://gekben.gitcd.com/blog/2012/08/16/install-systemtap-on-suse/"/>
    <updated>2012-08-16T20:49:00+08:00</updated>
    <id>http://gekben.gitcd.com/blog/2012/08/16/install-systemtap-on-suse</id>
    <content type="html"><![CDATA[<p>最近做LVS的性能测试，自然会用的各种工具检视系统状态，用了很多工具，都
不甚满意，于是想尝试下Systemtap，系统环境是SUSE Enterprise SP2,已经3.0的
kernel，可以search到的suse上安装systemtap的内容不多，碰到问题并解决了
的更是少，自然我又要成为苦逼的问题解决者了。</p>

<h2>正常安装的步骤是</h2>

<ul>
<li>添加suse enterprise的包含debuginfo的iso，有几个G啊</li>
<li><code>zypper in kernel-default-debuginfo</code></li>
<li><code>zypper in systemtap</code></li>
</ul>


<p>当我做完了以上这些，运行一个简单的脚本时:</p>

<p>{% codeblock systemtap hello_world lang:bash %}
sudo stap -ve 'probe begin { log("hello world") exit() }'
{% endcodeblock  %}</p>

<p>这个简单的例子是ok的，因为它不会涉及到systemtap的pass5，与kernel
module交互。跑下面这个的时候，就不行了:
{% codeblock systemtap hello_world lang:bash %}
stap -v -e 'probe vfs.read {printf("has VFS read()\n"); exit()}'
{% endcodeblock  %}
会报出类似<code>ERROR: Build-id mismatch: "kernel" vs. "vmlinux" byte 0 (0xf9 vs 0xa2)</code>的问题，关于build-id mismatch这个问题，还是可以
搜索到不少资料的，不过告诉如何解决的也不多。先说明下这个问题，
<code>kernel-default-debuginfo</code>里面是附赠了一个kernel elf文件的，在SUSE里，
安装后放在<code>/usr/lib/debug/boot/vmlinux-3.0.13-0.27-default.debug</code>，这
是debug版本的kernel vmlinux文件，是elf原始文件，未经压缩。<code>stap</code>运行时会去检查它的。
执行<code>eu-readelf -n
/usr/lib/debug/boot/vmlinux-3.0.13-0.27-default.debug</code>，可以拿到的
build-id，执行结果的第一个字节是<code>f9</code>，那另外一个<code>a2</code>是从哪里得出来的，猜想应该和当
前运行的kernel有关，于是拿到当前运行的vmlinux的压缩文件，解压后检查
build-id：
{% codeblock check build-id lang:bash %}
   gunzip /boot/vmlinux-3.0.13-0.27-default.gz
   eu-readelf -n /boot/vmlinux-3.0.13-0.27-default
{% endcodeblock %}
执行结果也是<code>f9</code>，是对得上的啊。</p>

<p>但是注意，这份.gz文件是SUSE附赠的，跟当前跑的vmlinz文件没有关系，于是
开始打vmlinuz文件的主意，得先想办法把vmlinuz->vmlinux，及bzImage到elf，
才能去取它的build-id，
<a href="%E8%BF%99%E9%87%8C">https://www.globalways.net/blog/archives/76-Extracting-bzImage-from-vmlinuz.html</a>有可行的方法。
<code>eu-readelf -n vmlinux-unpacked</code>的结果果然是<code>a2</code>，我只能是怀疑SUSE给的
默认vmlinuz有问题了，不能和SUSE提供的用于debuginfo的vmlinux匹配。</p>

<p>只能另外想办法，其实systemtap做kernel mismatch判断的关键代码，就在:</p>

<p>{% codeblock systemtap/runtime/sym.c lang:c %}
static int <em>stp_build_id_check (struct </em>stp_module *m,</p>

<pre><code>        unsigned long notes_addr,
        struct task_struct *tsk)
</code></pre>

<p>{
...
/<em> just hack it </em>/
if (rc || (theory != practice)) {</p>

<pre><code>  const char *basename;
  basename = strrchr(m-&gt;path, '/');
  if (basename)
</code></pre>

<p>|   basename++;</p>

<pre><code>  else
</code></pre>

<p>|   basename = m->path;</p>

<h1>if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,27)</h1>

<pre><code>  _stp_error ("Build-id mismatch: \"%s\" vs. \"%s\" byte %d (0x%02x vs 0x%02x) address %#lx rc %d\n",
</code></pre>

<p>|   |     m->name, basename, j, theory, practice, notes_addr, rc);</p>

<pre><code>  return 1;
</code></pre>

<h1>else</h1>

<pre><code>  /* This branch is a surrogate for kernels affected by Fedora bug
   * #465873. */
  _stp_warn (KERN_WARNING
</code></pre>

<p>|   |    "Build-id mismatch: \"%s\" vs. \"%s\" byte %d (0x%02x vs 0x%02x) rc %d\n",
|   |    m->name, basename, j, theory, practice, rc);</p>

<h1>endif</h1>

<pre><code>  break;
} /* end mismatch */
</code></pre>

<p>{% endcodeblock %}</p>

<p>关键就在于<code>if (rc || (theory != practice))</code>，小小修改的一下，写成:
<code>if (0 &amp;&amp; (rc || (theory != practice)))</code>就OK了，绕过了检查。然后重新编
译systemtap，直接用的SUSE提供的老版本的源码，新的会有问题，注意还要用
到SUSE提供的<code>libdwfl</code>的source code，才能完成编译，编译时在
<code>/usr/src/packages/SOURCES/elfutils-0.152/libdwfl/linux-kernel-modules.c</code>
文件上遇到了问题，稍作修改就可过关。尝试下新编译出来的<code>stap</code>，完全OK，它是不知
道'build-id mismatch`为何物的，敢这样改也就是因为都是offical的东西，本
应该match得上，应该不会出什么大问题，实践中检验吧。</p>

<p>Have fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[了解lvs调试]]></title>
    <link href="http://gekben.gitcd.com/blog/2012/07/26/lvs-debug-howto/"/>
    <updated>2012-07-26T21:32:00+08:00</updated>
    <id>http://gekben.gitcd.com/blog/2012/07/26/lvs-debug-howto</id>
    <content type="html"><![CDATA[<p>虽然对lvs的实现代码也算是心里有数了，但遇到一些具体问题时还拿不准，这时候就想到了lvs提供的调试功能，
是内核提供的一个选项。一般发行版默认是没打开的，至少我接触的suse enterprice和archlinux都是关闭
了ip_vs_debug，一起来看看怎么启用吧。
{% codeblock kernel config  %}
CONFIG_IP_VS_DEBUG=y
{% endcodeblock %}</p>

<p>在默认的config文件里找到这一项，可能是注释状态，改好后，就可以开始编译内核了，这个选项不是m，必须重新
编译产生新内核，在用<code>mkinitcpio -k kernel_full_name -c config</code>或者<code>mkinitrd -k kernel_full_name
</code>，前面是针对archlinux的，后面是针对suse的，这里有坑，此处略去1000字，反正记得如果用新内核启动，出现
找不到root的情况，八成是initrd做得有问题，fs相关的modules的问题。</p>

<p>新内核一切安好后，就可以玩lvs的调试功能了。先运行下<code>ipvsadm</code>，再<code>lsmod</code>看下<code>ip_vs</code>是否已经加载了。
再后面，就可以检查期待已久的调试选项了
{% codeblock ip_vs debug in /proc %}
/proc/sys/net/ipv4/vs/debug_level
{% endcodeblock %}</p>

<p><code>cat debug_level</code>一下，默认值是0，以后可以通过sysctl来更改默认值，下面讲下这个值的含义:
{% codeblock ip_vs_core.c lang:c %}
 IP_VS_DBG_BUF(1, "Forward ICMP: failed checksum from %s!\n", IP_VS_DBG_ADDR(af, snet));
{% endcodeblock %}
上面是一个debug macro的调用的例子，下面是宏的具体定义：</p>

<p>{% codeblock ip_vs.h lang:c %}</p>

<h1>ifdef CONFIG_IP_VS_DEBUG</h1>

<p>extern int ip_vs_get_debug_level(void);</p>

<h1>define IP_VS_DBG(level, msg...)            \</h1>

<pre><code>do {                        \
    if (level &lt;= ip_vs_get_debug_level())   \
        printk(KERN_DEBUG "IPVS: " msg);    \
} while (0)
</code></pre>

<h1>define IP_VS_DBG_RL(msg...)                \</h1>

<pre><code>do {                        \
    if (net_ratelimit())            \
        printk(KERN_DEBUG "IPVS: " msg);    \
} while (0)
</code></pre>

<h1>define IP_VS_DBG_PKT(level, pp, skb, ofs, msg)     \</h1>

<pre><code>do {                        \
    if (level &lt;= ip_vs_get_debug_level())   \
    pp-&gt;debug_packet(pp, skb, ofs, msg);    \
} while (0)
</code></pre>

<h1>define IP_VS_DBG_RL_PKT(level, pp, skb, ofs, msg)  \</h1>

<pre><code>do {                        \
    if (level &lt;= ip_vs_get_debug_level() &amp;&amp; \
    net_ratelimit())            \
    pp-&gt;debug_packet(pp, skb, ofs, msg);    \
} while (0)
</code></pre>

<h1>else   /<em> NO DEBUGGING at ALL </em>/</h1>

<h1>define IP_VS_DBG(level, msg...)  do {} while (0)</h1>

<h1>define IP_VS_DBG_RL(msg...)  do {} while (0)</h1>

<h1>define IP_VS_DBG_PKT(level, pp, skb, ofs, msg)     do {} while (0)</h1>

<h1>define IP_VS_DBG_RL_PKT(level, pp, skb, ofs, msg)  do {} while (0)</h1>

<h1>endif</h1>

<p>{% endcodeblock %}
可以清晰的看到，打印debug日志的条件是<code>level &lt;= ip_vs_get_debug_level()</code>，这个函数调用的返回值就是
<code>/proc/sys/net/ipv4/vs/debug_level</code>，万物皆文件的理念又体现了。
可见level的值越小，其优先级越高，查了一遍ip_vs的相关代码，level最大值不过12，也就是说，
只要把<code>/proc/sys/net/ipv4/vs/debug_level</code>设置成12，就能保证所有ip_vs的日志输出了，但一般没那个必要。
{% codeblock set debug_level to 12 %}
echo 12 > /proc/sys/net/ipv4/vs/debug_level
{% endcodeblock %}
对了，日志输出是在dmesg。</p>

<p>好了，方法就差不多是这些了，接下来就边看代码，边测试，边看输出吧。
have fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习万兆以太网，硬件和优化方法]]></title>
    <link href="http://gekben.gitcd.com/blog/2012/07/15/hardware-and-10gb-network/"/>
    <updated>2012-07-15T11:34:00+08:00</updated>
    <id>http://gekben.gitcd.com/blog/2012/07/15/hardware-and-10gb-network</id>
    <content type="html"><![CDATA[<p>上周末去杭州参加了<a href="http://adc.taobao.com/">ADC</a>，收获不小，关注的几个
topic都和万兆网有关。最近也在做用LVS替换F5的调研，对性能的要求非常高，
于是开始关注起10Gbe，记录一些资料和心得。</p>

<h2>个人关注点</h2>

<ul>
<li><a href="https://speakerdeck.com/u/gekben/p/by-intel">拥抱万兆以太网时代 - 探索英特尔® 至强® 处理器平台上的应用性能优化</a>

<ul>
<li>图片缩放及gzip的增强</li>
<li>E5-2600 DDIO这个绝对是重点，对网络收发性能提升明显</li>
<li>性价比高的10G BASE-T会逐渐成为主流</li>
</ul>
</li>
<li><a href="https://speakerdeck.com/u/gekben/p/lvs-used-in-taobao">LVS在淘宝环境中的应用</a>

<ul>
<li>FULLNAT模式，对大型网络降低运维难度非常好，但对LVS的改造很大，增加了复杂性</li>
<li>SynProxy，在lvs上实现syn cookie防御机制，不明白为什么要做在这里</li>
<li>taobao也没用上sandy bridge，还是E5640+intel 82599万兆卡</li>
<li>多队列网卡，每个core绑定网卡的一个队列</li>
<li>KeepAlived增强，select->epoll,localaddr</li>
<li>Cluster，因为real server本身无状态，水平扩容好做，OSPF</li>
<li>4/7层结合，lvs+nginx，nginx做7层业务负载</li>
</ul>
</li>
</ul>


<h2>硬件</h2>

<ul>
<li><a href="http://storage.chinabyte.com/447/12275447.shtml">介绍</a>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Sandy_Bridge_%28microarchitecture%29">sandy bridge</a> cpu列表</li>
<li><a href="http://www.intel.com/content/www/us/en/network-adapters/gigabit-network-adapters/ethernet-x520.html">x520</a></li>
<li><a href="http://ark.intel.com/products/58954/Intel-Ethernet-Converged-Network-Adapter-X540-T2">x540</a></li>
<li><a href="http://www.emulex.com/products/10gbe-network-adapters-nic/emulex-branded/oce11102-nt/overview.html">emulex 手头正好有这块卡</a></li>
</ul>
</li>
</ul>


<h2>优化</h2>

<ul>
<li>intel那个slides里有几个建议

<ul>
<li>Process affinity - socket</li>
<li>Interrupts affinity - socket</li>
<li>Disable LLDPAD,IPTABLES,IP6TABLES,SELINUX,IRQBALANCE</li>
</ul>
</li>
<li><a href="http://timetobleed.com/useful-kernel-and-driver-performance-tweaks-for-your-linux-server/">Linux kernel and driver</a></li>
<li><a href="http://www.linuxfoundation.org/collaborate/workgroups/networking">GRO,GSO,TSO...</a></li>
<li>Papers

<ul>
<li><a href="http://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=10Gbe+linux+optimization&amp;source=web&amp;cd=1&amp;ved=0CFQQFjAA&amp;url=http%3A%2F%2Fdocs.redhat.com%2Fdocs%2Fen-US%2FRed_Hat_Enterprise_Linux%2F6%2Fpdf%2FPerformance_Tuning_Guide%2FRed_Hat_Enterprise_Linux-6-Performance_Tuning_Guide-en-US.pdf&amp;ei=3D4RUKmWJ6O3iQed2YHYCw&amp;usg=AFQjCNGRhggpqYuUP0LQwoQE1uofWlN2dQ">RedHat</a></li>
<li><a href="http://www.google.com.hk/url?sa=t&amp;rct=j&amp;q=10Gbe+linux+optimization&amp;source=web&amp;cd=5&amp;ved=0CGUQFjAE&amp;url=http%3A%2F%2Fakashi.ci.i.u-tokyo.ac.jp%2Flab%2Fcmsdesigner%2Fdlfile.php%3Fentryname%3Dpublic%26entryid%3D00096%26fileid%3D00000001%26%2Fysn-camera.pdf&amp;ei=3D4RUKmWJ6O3iQed2YHYCw&amp;usg=AFQjCNGXO4wm2DQ8A6cAg1IsVzjbGjzvDg">Google</a></li>
<li><a href="http://www.kernel.org/doc/ols/2009/ols2009-pages-169-184.pdf">IBM</a></li>
</ul>
</li>
</ul>


<p>先记录到这里，边实践边补充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在archlinux里定制编译内核]]></title>
    <link href="http://gekben.gitcd.com/blog/2012/07/14/customize-kernel-in-arch-linux/"/>
    <updated>2012-07-14T16:54:00+08:00</updated>
    <id>http://gekben.gitcd.com/blog/2012/07/14/customize-kernel-in-arch-linux</id>
    <content type="html"><![CDATA[<p>心血来潮升级到
<a href="http://repo-ck.com/x86_64/linux-ck-corex-3.4.4-4-x86_64.pkg.tar.xz">linux-ck_3.4.4-4</a>
后，发现<code>pm-suspend</code>出问题了，可以<code>suspend</code>，但<code>resume</code>后显示屏亮不起
来，其它部分都<code>resume</code>成功了，可以隐约看见一些窗口的黑影。于是我又开始
折腾了，参考了
<a href="https://bbs.archlinux.org/viewtopic.php?id=143545">这篇</a>，插句题外话，
不知道不是巧合，好多问题都是在archlinux的相关论坛上找到了答案，都是一帮爱折腾的同好。</p>

<p>不幸的是，<a href="https://bbs.archlinux.org/viewtopic.php?id=143545">这篇</a>把
我引导向了错误的方向，决定把kernel降级到3.3.x。因为我用的不是官核，不
好找old archive，必须重新编译3.3.x-ck的内核，官方的old archives可以在
<a href="http://arm.konnichi.com/search/">这里</a>寻觅到。</p>

<p>拜<a href="https://wiki.archlinux.org/index.php/Arch_Build_System">Arch Build System</a>
所赐，编译、打包、patch的步骤都可以内置了，对于kernel也是一样。贴一部
分PKGBUILD文件的内容，是从
<a href="http://repo-ck.com/PKG_source/linux-ck/linux-ck-3.3.8-1.src.tar.gz">repo-ck的archive</a>
里找到的。</p>

<!-- more -->


<p>{% codeblock PKGBUILD %}</p>

<h3>PATCH AND BUILD OPTIONS</h3>

<p><em>makenconfig="n"    # tweak kernel options prior to a build via nconfig
</em>localmodcfg="n"    # compile ONLY probed modules
<em>use_current="n"    # use the current kernel's .config file
</em>BFQ_enable_="n"    # enable BFQ as the default I/O scheduler</p>

<p>pkgname=linux-ck
true &amp;&amp; pkgname=(linux-ck linux-ck-headers)
<em>kernelname=-ck
</em>basekernel=3.3
pkgver=${<em>basekernel}.8
pkgrel=1
arch=('i686' 'x86_64')
url="https://wiki.archlinux.org/index.php/Linux-ck"
license=('GPL2')
options=('!strip')
</em>ckpatchversion=1
<em>ckpatchname="patch-${</em>basekernel}-ck${<em>ckpatchversion}"
</em>bfqpath="http://algo.ing.unimo.it/people/paolo/disk_sched/patches/3.3.0-v3r3"
source=("http://www.kernel.org/pub/linux/kernel/v3.x/linux-3.3.tar.xz"
"http://www.kernel.org/pub/linux/kernel/v3.x/patch-${pkgver}.xz"
"http://ck.kolivas.org/patches/3.0/3.3/${<em>basekernel}-ck${</em>ckpatchversion}/${<em>ckpatchname}.bz2"
'linux-ck.preset'
'config' 'config.x86_64'
'change-default-console-loglevel.patch'
'i915-fix-ghost-tv-output.patch'
'ext4-options.patch'
'fix-acerhdf-1810T-bios.patch'
"${</em>bfqpath}/0001-block-cgroups-kconfig-build-bits-for-BFQ-v3r3-3.3.patch"
"${_bfqpath}/0002-block-introduce-the-BFQ-v3r3-I-O-sched-for-3.3.patch")
sha256sums=('355df2085626cdf0083c4bc0fe3017419034b6db5cce6f437ae8234a5e90b40c'</p>

<pre><code>        '4bbd173c995f44cb1bc5b002293765e8d8f9f076ae801f35cf456da9f0eba06d'
        'dd23a8e0fc6cdb393a9659d5d097c27e1ff5a0f30d0fe6a3441512a9bf6d00cb'
        'c2cf8cc2600502de348f3dc3aae9a3bde5486759db15cb8a93df7aa35bd6e7da'
        '253b11d36850a9c06ad8861a339da8895ddbb875d4e61579447a26f13423a160'
        '0f6def8badb9939ddb042657fd767c3a07ea7c291ed795935ebc8f81255231d7'
        'b9d79ca33b0b51ff4f6976b7cd6dbb0b624ebf4fbf440222217f8ffc50445de4'
        '9ccadbe3eb30bb283af3eb869c3a4bdb764628854811cc616a2e02e9ef398705'
        '0f15e7462b5d2650c354580920978228b3092bcf47e20e600242c8ca102df6f5'
        'f77e1a1f2d955f0499dc2957d1d65a3eb931212a13948b33916332296d0e4a7a'
        '179e159deaaa3976f5e5e329a640050b9803fef3cc77f8588a949b28c732c5ad'
        'a401732b5bc36eeccbaab86b216295d0ce0b30b8afdae66d8f59a382689da6a4')
</code></pre>

<p>build() {</p>

<pre><code>cd "${srcdir}/linux-${_basekernel}"

msg "Patching with upstream patch ${_basekernel} to ${_basekernel}.4"
# add upstream patch
#patch -p1 -i "${srcdir}/patch-${pkgver}"

# add latest fixes from stable queue, if needed
#http://git.kernel.org/?p=linux/kernel/git/stable/stable-queue.git

### Patch with BFQ IO Scheduler
msg "Patching source with BFQ patches"
#for p in $(ls ${srcdir}/000{1,2}-block*.patch); do
#   patch -Np1 -i $p
#done

### Clean tree and copy ARCH config over
msg "Running make mrproper to clean source tree"
make mrproper

if [ "${CARCH}" = "x86_64" ]; then
    cat "${srcdir}/config.x86_64" &gt; ./.config
else
    cat "${srcdir}/config" &gt; ./.config
fi

### Optionally use running kernel's config
# code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
if [ $_use_current = "y" ]; then
    if [[ -s /proc/config.gz ]]; then
        msg "Extracting config from /proc/config.gz..."
        # modprobe configs
        zcat /proc/config.gz &gt; ./.config
    else
        warning "You kernel was not compiled with IKCONFIG_PROC!"
        warning "You cannot read the current config!"
        warning "Aborting!"
        exit
    fi
fi

if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
fi

### BFQ to be compiled in but not enabled
sed -i -e s'/CONFIG_CFQ_GROUP_IOSCHED=y/CONFIG_CFQ_GROUP_IOSCHED=y\nCONFIG_IOSCHED_BFQ=y\nCONFIG_CGROUP_BFQIO=y/' \
    -i -e s'/CONFIG_DEFAULT_CFQ=y/CONFIG_DEFAULT_CFQ=y\n# CONFIG_DEFAULT_BFQ is not set/' ./.config

### Optionally enable BFQ as the default io scheduler
if [ $_BFQ_enable_ = "y" ]; then
    sed -i -e '/CONFIG_DEFAULT_IOSCHED/ s,cfq,bfq,' \
        -i -e s'/CONFIG_DEFAULT_CFQ=y/# CONFIG_DEFAULT_CFQ is not set\nCONFIG_DEFAULT_BFQ=y/' ./.config
fi

# set extraversion to pkgrel
sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

# get kernel version
msg "Running make prepare for you to enable patched options of your choosing"
make prepare

### Optionally load needed modules for the make localmodconfig
# See http://aur.archlinux.org/packages.php?ID=41689
if [ $_localmodcfg = "y" ]; then
    msg "If you have modprobe_db installed, running it in recall mode now"
    if [ -e /usr/bin/modprobed_db ]; then
        [[ ! -x /usr/bin/sudo ]] &amp;&amp; echo "Cannot call modprobe with sudo.  Install via pacman -S sudo and configure to work with this user." &amp;&amp; exit 1
        sudo /usr/bin/modprobed_db recall
    fi
    msg "Running Steven Rostedt's make localmodconfig now"
    make localmodconfig
fi

if [ $_makenconfig = "y" ]; then
    msg "Running make nconfig"
    make nconfig
fi

msg "Running make bzImage and modules"
make ${MAKEFLAGS} bzImage modules
</code></pre>

<p>}</p>

<p>package_linux-ck() {
...
{% endcodeblock %}</p>

<p>比较长，但也很易读懂，验证资源文件，解压资源文件，打patch，获取config，最后<code>make
bzImage modules</code>，可以在<code>export MAKEFLAGS="-j4"</code>，充分利用多核cpu加快
编译。读上面的配置文件可以知道，对于32/64的系统，已经提供了默认的
config文件，可以直接修改config，或者以<code>make menuconfig</code>的方式，这里有
个小技巧：
{% codeblock 获取依赖的资源并解压 lang:bash %}
$tar -xzvf linux-ck-3.3.8-1.src.tar.gz
$cd linux-ck
$makepkg -s
{% endcodeblock %}
ABS会自动按照PKGBUILD的步骤开始执行，可以在编译真正开始时，终止其执行，
可以在linux-ck目录下，发现src目录，所有patch，kernel源代码都放在这里了，
进入kernel源码目录，<code>make menuconfig</code>就可以对默认的config进行定制修改
了，具体步骤就不赘述了，大家慢慢体会，要注意的是，改了config文件后，记
得把PKGBUILD里相应文件的shasum也更新了。</p>

<p>用这种方法编译出来的kernel，是以<code>.xz</code> package的形式存在，就跟在
<code>/var/cache/pacman/pkg/</code>下的官方package一样，可以很好管理、跟踪。</p>

<p>最后解决休眠恢复的问题的方法，是降级成nvidia-295.53-2的驱动解决的，可以用在
最新的3.4.4-4-ck内核上，确实是驱动的问题，期间换用nouveau的开源驱动也
有同样问题。再之后，升级到更新的nvidia-ck驱动，就没问题了，没有以后了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LVS peristent代码分析]]></title>
    <link href="http://gekben.gitcd.com/blog/2012/07/11/study-on-lvs-kernel-code/"/>
    <updated>2012-07-11T12:24:00+08:00</updated>
    <id>http://gekben.gitcd.com/blog/2012/07/11/study-on-lvs-kernel-code</id>
    <content type="html"><![CDATA[<p>一直纠结于LVS使用persistent时，是以何为依据，决定一个新的连接请求的命运的：是被persistent管理，去到之前的real server，还是被调度算法重新调度，去到新的real server。
代码里其实写得非常清楚：</p>

<h2>Persistent in LVS(ipvs)</h2>

<ul>
<li>fwmark

<ul>
<li>&lt;IPPROTO_IP,caddr,0,fwmark,0,daddr,0> 这个六元组，最开始是写死的
ip协议，第一个0是cport，第二个0是dport，就是不在乎cport和dport，
这个daddr值得一提，经过debug发现，这个值为<code>0.0.0.fwmark</code>。</li>
</ul>
</li>
<li>Port zero service &lt;protocol,caddr,0,vaddr,0,daddr,0></li>
<li>non Port zero service

<ul>
<li>FTP &lt;caddr,0,vaddr,0,daddr,0></li>
<li>NON-FTP &lt;caddr,0,vaddr,vport,daddr,dport></li>
</ul>
</li>
</ul>


<!-- more -->


<p>  <br/>
如果是transparent mode，这种透明模式一般都是通过fwmark的方式实现，客户
端是不知道vip的存在的，比如用<code>iptables</code>设置了<code>fwmark</code>为3，则访问
http://sina.com.cn时，<code>daddr</code>就是<code>0.0.0.3</code>。</p>

<p>见代码17，21，77，80行。
{% codeblock /net/netfilter/ipvs/ip_vs_core.c lang:c %}</p>

<pre><code>/*
 * As far as we know, FTP is a very complicated network protocol, and
 * it uses control connection and data connections. For active FTP,
 * FTP server initialize data connection to the client, its source port
 * is often 20. For passive FTP, FTP server tells the clients the port
 * that it passively listens to,  and the client issues the data
 * connection. In the tunneling or direct routing mode, the load
 * balancer is on the client-to-server half of connection, the port
 * number is unknown to the load balancer. So, a conn template like
 * &lt;caddr, 0, vaddr, 0, daddr, 0&gt; is created for persistent FTP
 * service, and a template like &lt;caddr, 0, vaddr, vport, daddr, dport&gt;
 * is created for other persistent services.
 */
if (ports[1] == svc-&gt;port) {
    /* Check if a template already exists */
    if (svc-&gt;port != FTPPORT)
        ct = ip_vs_ct_in_get(svc-&gt;af, iph.protocol, &amp;snet, 0,
                     &amp;iph.daddr, ports[1]); /* &lt;caddr,0,vaddr,vport,daddr,dport&gt; */
    else
        ct = ip_vs_ct_in_get(svc-&gt;af, iph.protocol, &amp;snet, 0,
                     &amp;iph.daddr, 0);        /* &lt;caddr,0,vaddr,0,daddr,0&gt; */

    if (!ct || !ip_vs_check_template(ct)) {
        /*
         * No template found or the dest of the connection
         * template is not available.
         */
        dest = svc-&gt;scheduler-&gt;schedule(svc, skb);
        if (dest == NULL) {
            IP_VS_DBG(1, "p-schedule: no dest found.\n");
            return NULL;
        }

        /*
         * Create a template like &lt;protocol,caddr,0,
         * vaddr,vport,daddr,dport&gt; for non-ftp service,
         * and &lt;protocol,caddr,0,vaddr,0,daddr,0&gt;
         * for ftp service.
         */
        if (svc-&gt;port != FTPPORT)
            ct = ip_vs_conn_new(svc-&gt;af, iph.protocol,
                        &amp;snet, 0,
                        &amp;iph.daddr,
                        ports[1],
                        &amp;dest-&gt;addr, dest-&gt;port,
                        IP_VS_CONN_F_TEMPLATE,
                        dest);
        else
            ct = ip_vs_conn_new(svc-&gt;af, iph.protocol,
                        &amp;snet, 0,
                        &amp;iph.daddr, 0,
                        &amp;dest-&gt;addr, 0,
                        IP_VS_CONN_F_TEMPLATE,
                        dest);
        if (ct == NULL)
            return NULL;

        ct-&gt;timeout = svc-&gt;timeout;
    } else {
        /* set destination with the found template */
        dest = ct-&gt;dest;
    }
    dport = dest-&gt;port;
} else {
    /*
     * Note: persistent fwmark-based services and persistent
     * port zero service are handled here.
     * fwmark template: &lt;IPPROTO_IP,caddr,0,fwmark,0,daddr,0&gt;
     * port zero template: &lt;protocol,caddr,0,vaddr,0,daddr,0&gt;
     */
    if (svc-&gt;fwmark) {
        union nf_inet_addr fwmark = {
            .ip = htonl(svc-&gt;fwmark)
        };

        ct = ip_vs_ct_in_get(svc-&gt;af, IPPROTO_IP, &amp;snet, 0,
                     &amp;fwmark, 0); /* &lt;IPPROTO_IP,caddr,0,fwmark,0,daddr,0&gt; */
    } else
        ct = ip_vs_ct_in_get(svc-&gt;af, iph.protocol, &amp;snet, 0,
                     &amp;iph.daddr, 0); /* &lt;protocol,caddr,0,vaddr,0,daddr,0&gt; */

    if (!ct || !ip_vs_check_template(ct)) {
        /*
         * If it is not persistent port zero, return NULL,
         * otherwise create a connection template.
         */
        if (svc-&gt;port)
            return NULL;

        dest = svc-&gt;scheduler-&gt;schedule(svc, skb);
        if (dest == NULL) {
            IP_VS_DBG(1, "p-schedule: no dest found.\n");
            return NULL;
        }

        /*
         * Create a template according to the service
         */
        if (svc-&gt;fwmark) {
            union nf_inet_addr fwmark = {
                .ip = htonl(svc-&gt;fwmark)
            };

            ct = ip_vs_conn_new(svc-&gt;af, IPPROTO_IP,
                        &amp;snet, 0,
                        &amp;fwmark, 0,
                        &amp;dest-&gt;addr, 0,
                        IP_VS_CONN_F_TEMPLATE,
                        dest);
        } else
            ct = ip_vs_conn_new(svc-&gt;af, iph.protocol,
                        &amp;snet, 0,
                        &amp;iph.daddr, 0,
                        &amp;dest-&gt;addr, 0,
                        IP_VS_CONN_F_TEMPLATE,
                        dest);
        if (ct == NULL)
            return NULL;

        ct-&gt;timeout = svc-&gt;timeout;
    } else {
        /* set destination with the found template */
        dest = ct-&gt;dest;
    }
    dport = ports[1];
}
</code></pre>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
